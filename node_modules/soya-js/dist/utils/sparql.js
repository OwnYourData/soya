var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SparqlQueryBuilder = exports.SparqlGraph = void 0;
const sparql_engine_1 = require("sparql-engine");
const rdf_ext_1 = __importDefault(require("rdf-ext"));
const rdf_1 = require("./rdf");
const namedNode = rdf_ext_1.default.namedNode;
const blankNode = rdf_ext_1.default.blankNode;
const mapMatchToExt = (val) => {
    if (val.startsWith('?'))
        return;
    if ((0, rdf_1.isIRI)(val))
        return namedNode(val);
    else
        return blankNode(val);
};
const mapExtToString = (x) => {
    let ret = x.value;
    if (x.language)
        ret = `"${ret}"@${x.language}`;
    return ret;
};
class SparqlGraph extends sparql_engine_1.Graph {
    constructor(_graph) {
        super();
        this._graph = _graph;
    }
    insert(_) {
        throw new Error("Method not implemented.");
    }
    delete(_) {
        throw new Error("Method not implemented.");
    }
    find({ subject, predicate, object }, _) {
        const res = this._graph.match(mapMatchToExt(subject), mapMatchToExt(predicate), mapMatchToExt(object));
        return Array.from(res).map((x) => ({
            subject: mapExtToString(x.subject),
            predicate: mapExtToString(x.predicate),
            object: mapExtToString(x.object),
        }));
    }
    clear() {
        throw new Error("Method not implemented.");
    }
}
exports.SparqlGraph = SparqlGraph;
class SparqlQueryBuilder {
    constructor(_graph) {
        this.query = (query) => {
            const iterator = this._builder.build(query); // FIXME: this `as` might not be correct!
            return new Promise((resolve, reject) => {
                let data = [];
                iterator.subscribe((val) => data.push(val), // FIXME: this `as` might not be correct!
                (err) => reject(err), () => {
                    resolve(data);
                });
            });
        };
        const graph = new SparqlGraph(_graph);
        const dataset = new sparql_engine_1.HashMapDataset('http://example.org#graph-a', graph);
        this._builder = new sparql_engine_1.PlanBuilder(dataset);
    }
}
exports.SparqlQueryBuilder = SparqlQueryBuilder;
//# sourceMappingURL=sparql.js.map