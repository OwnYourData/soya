var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Soya = void 0;
const main_1 = require("vaultifier/dist/main");
const errors_1 = require("./errors");
const interfaces_1 = require("./interfaces");
const logger_1 = require("./services/logger");
const repo_1 = require("./services/repo");
const flat2ld_1 = require("./system/flat2ld");
const form_1 = require("./system/form");
const yaml2soya_1 = require("./system/yaml2soya");
const dri_1 = require("./utils/dri");
const rdf_1 = require("./utils/rdf");
const asStringInput = (input) => {
    if (typeof input === 'object')
        return JSON.stringify(input);
    else
        return input;
};
const asObjectInput = (input) => {
    if (typeof input === 'string')
        return JSON.parse(input);
    else
        return input;
};
class Soya {
    constructor(config) {
        var _a;
        this.init = (yaml) => __awaiter(this, void 0, void 0, function* () {
            return (0, yaml2soya_1.yaml2soya)(yaml, repo_1.DEFAULT_SOYA_NAMESPACE, this.service.repo);
        });
        this.pull = (path, options = {
            pullType: 'json-ld',
        }) => __awaiter(this, void 0, void 0, function* () {
            const subPath = options.pullType === 'yaml' ? '/yaml' : '';
            return this.service.pull(`${path}${subPath}`);
        });
        this.push = (input, additionalProperties = {}) => __awaiter(this, void 0, void 0, function* () {
            const data = asObjectInput(input);
            let res;
            let value;
            if ((0, interfaces_1.isInstance)(data)) {
                logger_1.logger.info('Pushing instance');
                let path;
                let repo;
                try {
                    const url = data['@context']['@vocab'];
                    // we already reverse the array here as we have to remove trailing slashes from the end
                    let splitParts = url.split('/').reverse();
                    // kill empty items (can happen if there is a trailing slash) at the end
                    const firstNonempty = splitParts.findIndex(x => !!x);
                    if (firstNonempty !== -1)
                        splitParts = splitParts.slice(firstNonempty);
                    // bring it into correct order
                    splitParts = splitParts.reverse();
                    // last bit is structure name or DRI
                    path = splitParts[splitParts.length - 1];
                    // everything before is the repo
                    repo = splitParts.slice(0, -1).join('/');
                    if (!path || !repo)
                        throw new Error();
                }
                catch (_b) {
                    throw new Error('Could not extract name of structure from @vocab');
                }
                logger_1.logger.debug(`Path: ${path}`);
                logger_1.logger.debug(`Repo: ${repo}`);
                const info = yield new repo_1.RepoService(repo).info(path);
                res = yield this.service.pushItem({
                    content: data,
                    mimeType: main_1.MimeType.JSON,
                    dri: (yield this.calculateDri(data)).dri,
                    schemaDri: info.dri,
                });
                value = res.raw;
            }
            else {
                logger_1.logger.info('Pushing structure');
                res = yield this.service.pushItem(Object.assign({ content: data, mimeType: main_1.MimeType.JSON }, additionalProperties));
                const vaultItem = yield (yield this.service.getVaultifier()).getItem({
                    id: res.id,
                });
                value = vaultItem.dri;
            }
            return {
                value: value,
                item: res,
            };
        });
        this.similar = (input) => __awaiter(this, void 0, void 0, function* () {
            return this.service.similar(asStringInput(input));
        });
        this.query = (query) => __awaiter(this, void 0, void 0, function* () {
            return this.service.query(query);
        });
        this.toCanonical = (soyaDoc) => __awaiter(this, void 0, void 0, function* () {
            const dataset = yield (0, rdf_1.parseJsonLd)(soyaDoc);
            return dataset.toCanonical();
        });
        this.calculateDri = (content) => __awaiter(this, void 0, void 0, function* () {
            let json;
            if (typeof content === 'string')
                try {
                    json = JSON.parse(content);
                }
                catch (_c) {
                    throw new errors_1.JsonParseError('Could not parse JSON');
                }
            else
                json = content;
            logger_1.logger.debug('Raw input:');
            logger_1.logger.debug(JSON.stringify(json));
            let quads = yield (0, rdf_1.parseJsonLd)(json);
            return (0, dri_1.calculateBaseUri)({
                json,
                quads,
            });
        });
        this.acquire = (path, flatJson) => __awaiter(this, void 0, void 0, function* () {
            let soyaStructure = yield this.service.pull(path);
            return (0, flat2ld_1.flat2ld)(flatJson, soyaStructure);
        });
        this.getForm = (soyaDoc, options) => __awaiter(this, void 0, void 0, function* () {
            return (0, form_1.getSoyaForm)(soyaDoc, options);
        });
        this.service = (_a = config === null || config === void 0 ? void 0 : config.service) !== null && _a !== void 0 ? _a : repo_1.RepoService.getInstance();
        if (config === null || config === void 0 ? void 0 : config.logger)
            (0, logger_1.setLogger)(config.logger);
    }
    info(path) {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-expect-error ts does not get this although it's correct
            return yield this.service.info(path);
        });
    }
}
exports.Soya = Soya;
//# sourceMappingURL=soya.js.map