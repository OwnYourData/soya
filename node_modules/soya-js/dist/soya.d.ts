import { VaultMinMeta } from "vaultifier/dist/main";
import winston from "winston";
import { SoyaDocument, SoyaInstance } from "./interfaces";
import { SoyaQuery, SoyaQueryResult, SoyaInfo } from "./services/repo";
import { RepoService } from "./services/repo";
import { SoyaFormOptions, SoyaFormResponse } from "./system/form";
import { CalculationResult } from "./utils/dri";
export interface SoyaConfig {
    service?: RepoService;
    logger?: winston.Logger;
}
export interface PushResponse {
    value: any;
    item: VaultMinMeta;
}
export interface PullOptions {
    pullType: 'json-ld' | 'yaml';
}
export declare class Soya {
    service: RepoService;
    constructor(config?: SoyaConfig);
    init: (yaml: string) => Promise<SoyaDocument | undefined>;
    pull: (path: string, options?: PullOptions) => Promise<SoyaDocument>;
    push: (input: unknown, additionalProperties?: {
        [key: string]: any;
    }) => Promise<PushResponse>;
    similar: (input: unknown) => Promise<any>;
    query: (query: SoyaQuery) => Promise<SoyaQueryResult[]>;
    toCanonical: (soyaDoc: SoyaDocument) => Promise<string>;
    info(path: string[]): Promise<SoyaInfo[]>;
    info(path: string): Promise<SoyaInfo>;
    calculateDri: (content: any) => Promise<CalculationResult>;
    acquire: (path: string, flatJson: any) => Promise<SoyaInstance>;
    getForm: (soyaDoc: SoyaDocument, options?: SoyaFormOptions | undefined) => Promise<SoyaFormResponse>;
}
