#!/usr/bin/env node
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logNiceConsole = void 0;
const commands_1 = require("./commands");
const logger_1 = require("./services/logger");
const cmd_1 = require("./utils/cmd");
const package_1 = require("./utils/package");
const soya_js_1 = require("soya-js");
const core_1 = require("./utils/core");
const std_1 = require("./utils/std");
const transform_1 = require("./overlays/transform");
const overlayPlugins = {
    'transform': new transform_1.SoyaTransform(),
    'validate': new soya_js_1.Overlays.SoyaValidate(),
};
const logNiceConsole = (value) => {
    let out = value;
    if (typeof value === 'object')
        out = JSON.stringify(value, undefined, 2);
    console.log(out);
};
exports.logNiceConsole = logNiceConsole;
(() => __awaiter(this, void 0, void 0, function* () {
    if (cmd_1.cmdArgs.version)
        return console.log(package_1.packageJson.version);
    if (!cmd_1.cmdArgs.default || (!cmd_1.cmdArgs.default && cmd_1.cmdArgs.help))
        return (0, cmd_1.printCliHelp)();
    const { repo, default: [command, param1], } = cmd_1.cmdArgs;
    if (command && cmd_1.cmdArgs.help)
        return (0, cmd_1.printCliHelp)(command);
    logger_1.logger.info(`${package_1.packageJson.name} (${package_1.packageJson.version})\n`);
    let repoService = undefined;
    if (repo) {
        logger_1.logger.debug(`Using repo: ${repo}`);
        repoService = new soya_js_1.RepoService(repo);
    }
    const soya = new soya_js_1.Soya({
        service: repoService,
        logger: logger_1.logger,
    });
    // system commands
    if (command) {
        const func = commands_1.systemCommands[command];
        if (func) {
            func(Object.assign(Object.assign({}, cmd_1.cmdArgs), { default: param1 }), soya);
            return;
        }
    }
    if (!command)
        return (0, core_1.exitWithError)('No command specified!');
    const plugin = overlayPlugins[command];
    if (!plugin)
        return (0, core_1.exitWithError)(`No plugin available for command "${command}"!`);
    if (!param1)
        return (0, core_1.exitWithError)('No DRI specified!');
    let input = yield std_1.Std.in();
    if (!input)
        return (0, core_1.exitWithError)('No input data specified!');
    const layer = yield soya.pull(param1);
    let parsedInput;
    try {
        parsedInput = JSON.parse(input);
    }
    catch (_a) {
        logger_1.logger.error('Input data is not valid JSON!');
        return;
    }
    logger_1.logger.debug('Overlay:', layer);
    logger_1.logger.debug('Data In:', parsedInput);
    let res;
    try {
        res = yield plugin.run(layer, parsedInput);
    }
    catch (e) {
        logger_1.logger.error(`Plugin "${command}" raised an error: ${e.message}`);
        return;
    }
    logger_1.logger.debug('Data Out:', res);
    let output = res.data;
    try {
        (0, exports.logNiceConsole)(output);
    }
    catch (_b) {
        console.log(output);
    }
    return;
}))();
//# sourceMappingURL=index.js.map