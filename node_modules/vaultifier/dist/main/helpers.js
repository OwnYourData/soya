"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVaultItem = exports.decryptOrNot = exports.parseVaultItemMeta = void 0;
const crypto_1 = require("./crypto");
exports.parseVaultItemMeta = (data) => ({
    id: data.id,
    accessCount: data.access_count,
    createdAt: new Date(data.created_at),
    updatedAt: new Date(data.updated_at),
    tableName: data.table_name,
    dri: data.dri,
    schemaDri: data.schema_dri,
    mimeType: data.mime_type,
    merkleId: data.merkle_id,
    oydHash: data.oyd_hash,
    oydSourcePileId: data.oyd_source_pile_id,
    raw: data,
});
exports.decryptOrNot = (item, privateKey) => __awaiter(void 0, void 0, void 0, function* () {
    if (privateKey &&
        crypto_1.isEncrypted(item)) {
        const decrypted = yield crypto_1.decrypt(item, { cipher: privateKey });
        try {
            return JSON.parse(decrypted);
        }
        catch ( /* the encrypted data is delivered as string */_a) { /* the encrypted data is delivered as string */ }
    }
    return item;
});
exports.parseVaultItem = (data, privateKey) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof data === 'string') {
        try {
            // item usually contains JSON data, therefore we try to parse the string
            data = JSON.parse(data);
        }
        catch ( /* */_b) { /* */ }
    }
    const isContentEncrypted = crypto_1.isEncrypted(data.content);
    data.content = yield exports.decryptOrNot(data.content, privateKey);
    const item = Object.assign(Object.assign({}, exports.parseVaultItemMeta(data)), { isEncrypted: isContentEncrypted, content: data.content });
    return item;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHFDQUFnRDtBQUduQyxRQUFBLGtCQUFrQixHQUFHLENBQUMsSUFBUyxFQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQzNELEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtJQUNYLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWTtJQUM5QixTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNwQyxTQUFTLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUNwQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVU7SUFDMUIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO0lBQ2IsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO0lBQzFCLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUztJQUN4QixRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVM7SUFDeEIsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRO0lBQ3RCLGVBQWUsRUFBRSxJQUFJLENBQUMsa0JBQWtCO0lBQ3hDLEdBQUcsRUFBRSxJQUFJO0NBQ1YsQ0FBQyxDQUFDO0FBRVUsUUFBQSxZQUFZLEdBQUcsQ0FBTyxJQUFTLEVBQUUsVUFBbUIsRUFBZ0IsRUFBRTtJQUNqRixJQUNFLFVBQVU7UUFDVixvQkFBVyxDQUFDLElBQUksQ0FBQyxFQUNqQjtRQUNBLE1BQU0sU0FBUyxHQUFHLE1BQU0sZ0JBQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUU5RCxJQUFJO1lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzlCO1FBQUMsUUFBUSwrQ0FBK0MsSUFBakQsRUFBRSwrQ0FBK0MsRUFBRTtLQUM1RDtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFBLENBQUE7QUFFWSxRQUFBLGNBQWMsR0FBRyxDQUFPLElBQVMsRUFBRSxVQUFtQixFQUFzQixFQUFFO0lBQ3pGLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzVCLElBQUk7WUFDRix3RUFBd0U7WUFDeEUsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekI7UUFBQyxRQUFRLEtBQUssSUFBUCxFQUFFLEtBQUssRUFBRTtLQUNsQjtJQUVELE1BQU0sa0JBQWtCLEdBQUcsb0JBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLG9CQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUU1RCxNQUFNLElBQUksbUNBQ0wsMEJBQWtCLENBQUMsSUFBSSxDQUFDLEtBQzNCLFdBQVcsRUFBRSxrQkFBa0IsRUFDL0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEdBQ3RCLENBQUM7SUFFRixPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQSxDQUFBIn0=