// TODO: User should be able to change repo on the fly
export class VaultifierUrls {
    constructor(baseUrl = 'https://data-vault.eu', repo) {
        // TODO: re-enable this security barrier
        // don't allow insecure builds for production mode
        // if (process.env.NODE_ENV === 'production' && new URL(baseUrl).protocol !== 'https:')
        //   throw Error('Protocol of baseUrl is not "https".');
        this.baseUrl = baseUrl;
        this.repo = repo;
        this.getPagingParam = (page) => `${(page === null || page === void 0 ? void 0 : page.page) ? `&page=${page.page}` : ''}`;
        this.getMultiple = (format, query) => (query === null || query === void 0 ? void 0 : query.schemaDri) ? `${this.baseUrl}/api/data?schema_dri=${query.schemaDri}&f=${format}${this.getPagingParam(query === null || query === void 0 ? void 0 : query.page)}` :
            (query === null || query === void 0 ? void 0 : query.tableId) ? `${this.baseUrl}/api/data?table=${query.tableId}&f=${format}${this.getPagingParam(query === null || query === void 0 ? void 0 : query.page)}`
                : `${this.baseUrl}/api/data?repo_id=${this.repo}&f=${format}${this.getPagingParam(query === null || query === void 0 ? void 0 : query.page)}`;
        this.getMetaItems = (query) => this.getMultiple('meta', query);
        this.getItems = (query) => this.getMultiple('full', query);
        this.getValues = (query) => this.getMultiple('plain', query);
        this.getSingle = (format, query) => query.id
            ? `${this.baseUrl}/api/data/${query.id}?p=id&f=${format}`
            : `${this.baseUrl}/api/data/${query.dri}?p=dri&f=${format}`;
        this.getItem = (query) => this.getSingle('full', query);
        this.getValue = (query) => this.getSingle('plain', query);
        this.deleteItem = (query) => query.id
            ? `${this.baseUrl}/api/data/${query.id}?p=id`
            : `${this.baseUrl}/api/data/${query.dri}?p=dri`;
        // putting an item uses the same url as deleting an item
        this.putItem = (query) => this.deleteItem(query);
        this.getSchemas = () => `${this.baseUrl}/api/meta/schemas`;
        this.getRelations = (id) => `${this.baseUrl}/api/relation?id=${id}`;
        this.resolveInstallCode = (code) => `${this.baseUrl}/api/install/${code}`;
        this.publicKey = () => 
        // oyd.settings is the default repo for storing the public key
        `${this.baseUrl}/api/repos/${this.repo || 'oyd.settings'}/pub_key`;
        this.getEncryptedPassword = (nonce) => `${this.support}/${nonce}`;
        this.getOAuthAuthorizationCode = (clientId, redirectUri, codeChallenge) => `${this.baseUrl}/oauth/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&code_challenge=${codeChallenge}`;
        this.getGenericUrl = (url) => {
            if (!url.startsWith('/'))
                throw new Error('Generic urls must have a leading slash!');
            return `${this.baseUrl}${url}`;
        };
        this.getEidasExternalUrl = (id, token, redirectUrl) => `${this.baseUrl}/api/eidas?id=${id}&token=${token}&redirect_url=${redirectUrl}`;
        this.setRepo = (repo) => this.repo = repo;
        this.token = `${baseUrl}/oauth/token`;
        this.active = `${baseUrl}/api/active`;
        this.support = `${baseUrl}/api/support`;
        this.postValue = `${baseUrl}/api/data`;
        this.postItem = `${baseUrl}/api/data`;
        this.privateKey = `${baseUrl}/api/users/current`;
        this.getRepos = `${baseUrl}/api/repos/index`;
        this.getTables = `${baseUrl}/api/meta/tables`;
        this.usagePolicy = `${baseUrl}/api/meta/usage`;
        this.info = `${baseUrl}/api/meta/info`;
        this.eidasToken = `${this.baseUrl}/api/eidas/token`;
    }
}
VaultifierUrls.getRedirectUrl = () => {
    const redirectUrl = new URL(window.location.href);
    // remove hash as this could interfere with redirection
    redirectUrl.hash = '';
    return redirectUrl.toString();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91cmxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHNEQUFzRDtBQUN0RCxNQUFNLE9BQU8sY0FBYztJQWF6QixZQUNTLFVBQWtCLHVCQUF1QixFQUN4QyxJQUFhO1FBRXJCLHdDQUF3QztRQUN4QyxrREFBa0Q7UUFDbEQsdUZBQXVGO1FBQ3ZGLHdEQUF3RDtRQU5qRCxZQUFPLEdBQVAsT0FBTyxDQUFrQztRQUN4QyxTQUFJLEdBQUosSUFBSSxDQUFTO1FBcUJmLG1CQUFjLEdBQUcsQ0FBQyxJQUEyQixFQUFFLEVBQUUsQ0FDdkQsR0FBRyxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUV0QyxnQkFBVyxHQUFHLENBQUMsTUFBYyxFQUFFLEtBQXVCLEVBQUUsRUFBRSxDQUNoRSxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxTQUFTLEVBQ2QsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sd0JBQXdCLEtBQUssQ0FBQyxTQUFTLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMzRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxPQUFPLEVBQ1osQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sbUJBQW1CLEtBQUssQ0FBQyxPQUFPLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNsRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxxQkFBcUIsSUFBSSxDQUFDLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUV2RyxpQkFBWSxHQUFHLENBQUMsS0FBdUIsRUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEYsYUFBUSxHQUFHLENBQUMsS0FBdUIsRUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEYsY0FBUyxHQUFHLENBQUMsS0FBdUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEUsY0FBUyxHQUFHLENBQUMsTUFBYyxFQUFFLEtBQXFCLEVBQUUsRUFBRSxDQUM1RCxLQUFLLENBQUMsRUFBRTtZQUNOLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLGFBQWEsS0FBSyxDQUFDLEVBQUUsV0FBVyxNQUFNLEVBQUU7WUFDekQsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sYUFBYSxLQUFLLENBQUMsR0FBRyxZQUFZLE1BQU0sRUFBRSxDQUFDO1FBRWhFLFlBQU8sR0FBRyxDQUFDLEtBQXFCLEVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNFLGFBQVEsR0FBRyxDQUFDLEtBQXFCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXJFLGVBQVUsR0FBRyxDQUFDLEtBQXFCLEVBQUUsRUFBRSxDQUNyQyxLQUFLLENBQUMsRUFBRTtZQUNOLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLGFBQWEsS0FBSyxDQUFDLEVBQUUsT0FBTztZQUM3QyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxhQUFhLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUVwRCx3REFBd0Q7UUFDeEQsWUFBTyxHQUFHLENBQUMsS0FBcUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU1RCxlQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxtQkFBbUIsQ0FBQztRQUN0RCxpQkFBWSxHQUFHLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLG9CQUFvQixFQUFFLEVBQUUsQ0FBQztRQUN2RSx1QkFBa0IsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxnQkFBZ0IsSUFBSSxFQUFFLENBQUM7UUFDN0UsY0FBUyxHQUFHLEdBQUcsRUFBRTtRQUNmLDhEQUE4RDtRQUM5RCxHQUFHLElBQUksQ0FBQyxPQUFPLGNBQWMsSUFBSSxDQUFDLElBQUksSUFBSSxjQUFjLFVBQVUsQ0FBQztRQUNyRSx5QkFBb0IsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBRXJFLDhCQUF5QixHQUFHLENBQUMsUUFBZ0IsRUFBRSxXQUFtQixFQUFFLGFBQXFCLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sOEJBQThCLFFBQVEsb0NBQW9DLFdBQVcsbUJBQW1CLGFBQWEsRUFBRSxDQUFBO1FBRXBPLGtCQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRTtZQUM5QixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUM7Z0JBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztZQUU3RCxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUE7UUFFRCx3QkFBbUIsR0FBRyxDQUFDLEVBQVUsRUFBRSxLQUFhLEVBQUUsV0FBbUIsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxpQkFBaUIsRUFBRSxVQUFVLEtBQUssaUJBQWlCLFdBQVcsRUFBRSxDQUFDO1FBUzFKLFlBQU8sR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUF0RTNDLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxPQUFPLGNBQWMsQ0FBQztRQUV0QyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsT0FBTyxhQUFhLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLE9BQU8sY0FBYyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxPQUFPLFdBQVcsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsT0FBTyxXQUFXLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLE9BQU8sb0JBQW9CLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLE9BQU8sa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLE9BQU8sa0JBQWtCLENBQUM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLE9BQU8saUJBQWlCLENBQUM7UUFDL0MsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLE9BQU8sZ0JBQWdCLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLGtCQUFrQixDQUFDO0lBQ3RELENBQUM7O0FBbURNLDZCQUFjLEdBQUcsR0FBRyxFQUFFO0lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEQsdURBQXVEO0lBQ3ZELFdBQVcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLE9BQU8sV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hDLENBQUMsQ0FBQSJ9