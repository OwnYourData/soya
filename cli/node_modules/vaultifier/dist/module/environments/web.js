var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Vaultifier } from "..";
import { StorageKey } from "../constants";
import { getRandomString } from '../crypto';
import { OAuthType } from "../interfaces";
import { Storage } from "../storage";
import { VaultifierUrls } from "../urls";
const defaultOptions = {
    repo: undefined,
    clientId: undefined,
    baseUrlParamName: 'PIA_URL',
    appKeyParamName: 'APP_KEY',
    appSecretParamName: 'APP_SECRET',
    masterKeyParamName: 'MASTER_KEY',
    nonceParamName: 'NONCE',
    clientIdParamName: 'client_id',
    clientSecretParamName: 'client_secret',
    authorizationCodeParamName: 'code',
};
export class VaultifierWeb {
    /**
     * Creates a Vaultifier object by retrieving connection data from URL query parameters
     */
    static create(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URL(window.location.href).searchParams;
            const getParam = (name) => params.get(name) || undefined;
            let _options = defaultOptions;
            if (_options)
                _options = Object.assign(Object.assign({}, _options), options);
            const { appKeyParamName, appSecretParamName, authorizationCodeParamName, baseUrlParamName, clientIdParamName, clientSecretParamName, masterKeyParamName, nonceParamName, repo, } = _options;
            let { clientId, } = _options;
            // in web environments, we just fall back to the window's location origin, if there is no parameter specified
            const baseUrl = getParam(baseUrlParamName) || window.location.origin;
            const appKey = getParam(appKeyParamName);
            const appSecret = getParam(appSecretParamName);
            // if clientId parameter is specified as query parameter it is already the second step client id parameter of OAuth
            clientId = (_a = getParam(clientIdParamName)) !== null && _a !== void 0 ? _a : clientId;
            const authorizationCode = getParam(authorizationCodeParamName);
            let credentials = undefined;
            if (appKey && appSecret)
                credentials = {
                    appKey,
                    appSecret,
                };
            else if (authorizationCode && clientId)
                credentials = {
                    authorizationCode,
                    clientId,
                };
            const masterKey = getParam(masterKeyParamName);
            const nonce = getParam(nonceParamName);
            const end2end = (masterKey && nonce) ? {
                masterKey,
                nonce,
            } : undefined;
            let vaultifier = new Vaultifier(baseUrl, repo, credentials, end2end);
            try {
                yield vaultifier.getVaultSupport();
            }
            catch (_c) {
                // if baseUrl was specified, we try it with Vaultifier's default value
                // therefore passing undefined
                if (baseUrl) {
                    vaultifier = new Vaultifier(undefined, repo, credentials, end2end);
                    try {
                        yield vaultifier.getVaultSupport();
                    }
                    catch (e) {
                        console.error(e);
                        return undefined;
                    }
                }
            }
            try {
                // try initializing vaultifier to see if credentials are working
                yield vaultifier.initialize();
            }
            catch ( /* */_d) { /* */ }
            // if we could not authorize until this stage
            // we try to login via OAuth, if supported
            const isAuthenticated = yield vaultifier.isAuthenticated();
            if (!isAuthenticated) {
                if (clientId && ((_b = (yield vaultifier.getVaultSupport()).oAuth) === null || _b === void 0 ? void 0 : _b.type) === OAuthType.AUTHORIZATION_CODE) {
                    // create PKCE secret
                    const pkceSecret = getRandomString(32);
                    // const hashedSecret = btoa(await createSha256Hex(pkceSecret));
                    const redirectUrl = VaultifierUrls.getRedirectUrl();
                    // we need this secret for later OAuth token retrieval
                    Storage.set(StorageKey.PKCE_SECRET, pkceSecret);
                    Storage.set(StorageKey.OAUTH_REDIRECT_URL, redirectUrl);
                    window.location.href = vaultifier.urls.getOAuthAuthorizationCode(clientId, window.encodeURIComponent(redirectUrl), pkceSecret);
                    // we just wait forever as the browser is now changing the visible page ;-)
                    yield new Promise(() => undefined);
                }
            }
            const newUrl = new URL(window.location.href);
            // remove sensitive information while preserving probably important url parameters
            newUrl.searchParams.delete(appKeyParamName);
            newUrl.searchParams.delete(appSecretParamName);
            newUrl.searchParams.delete(masterKeyParamName);
            newUrl.searchParams.delete(nonceParamName);
            newUrl.searchParams.delete(clientIdParamName);
            newUrl.searchParams.delete(clientSecretParamName);
            newUrl.searchParams.delete(authorizationCodeParamName);
            window.history.replaceState(undefined, document.title, newUrl.toString());
            return vaultifier;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Vudmlyb25tZW50cy93ZWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLElBQUksQ0FBQztBQUNoQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBMkMsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBNkN6QyxNQUFNLGNBQWMsR0FBeUI7SUFDM0MsSUFBSSxFQUFFLFNBQVM7SUFDZixRQUFRLEVBQUUsU0FBUztJQUNuQixnQkFBZ0IsRUFBRSxTQUFTO0lBQzNCLGVBQWUsRUFBRSxTQUFTO0lBQzFCLGtCQUFrQixFQUFFLFlBQVk7SUFDaEMsa0JBQWtCLEVBQUUsWUFBWTtJQUNoQyxjQUFjLEVBQUUsT0FBTztJQUN2QixpQkFBaUIsRUFBRSxXQUFXO0lBQzlCLHFCQUFxQixFQUFFLGVBQWU7SUFDdEMsMEJBQTBCLEVBQUUsTUFBTTtDQUNuQyxDQUFDO0FBRUYsTUFBTSxPQUFnQixhQUFhO0lBRWpDOztPQUVHO0lBQ0gsTUFBTSxDQUFPLE1BQU0sQ0FBQyxPQUF1Qzs7O1lBQ3pELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDO1lBQzFELE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWSxFQUFzQixFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUM7WUFFckYsSUFBSSxRQUFRLEdBQXlCLGNBQWMsQ0FBQztZQUVw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